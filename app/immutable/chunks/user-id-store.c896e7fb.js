import{c as l,S as u}from"./store-keys.d2aaf089.js";let s;const p=async()=>new Promise((e,t)=>{const n=indexedDB.open("kurosearch",1);n.onsuccess=r=>{e(r.target.result)},n.onerror=r=>{console.error("Error opening tag database:",r),t(r)},n.onupgradeneeded=r=>{const a=r.target.result;a.onerror=c=>{console.error("Error during tag database upgrade:",c),t(c)};const o=a.createObjectStore("tags",{keyPath:"name"});o.createIndex("name","name",{unique:!0}),o.createIndex("count","count",{unique:!1}),o.createIndex("type","type",{unique:!1}),e(a)}});p().then(e=>{s=e}).catch(e=>{console.error("Failed to initialize IndexedDB:",e)});const m=async e=>new Promise((t,n)=>{if(!s)return t();const r=s.transaction("tags","readwrite").objectStore("tags").put(e);r.onsuccess=()=>t(),r.onerror=a=>{console.error("Error adding tag:",a),n(a)}}),f=async e=>new Promise(t=>{if(!s)return t(void 0);s.transaction("tags","readonly").objectStore("tags").get(e).onsuccess=n=>{const r=n.target.result;t(r)}}),g=e=>e.replaceAll("&#034;",'"').replaceAll("&#038;","&").replaceAll("&#039;","'").replaceAll("&eacute;","Ã©"),h=e=>{try{return new URL(e),!0}catch{return!1}},w=(e,t)=>{if(!h(e))throw new TypeError("Invalid URL passed to fetchAbortPrevious");if(!y(t))throw new TypeError("Invalid AbortController passed to fetchAbortPrevious");return t&&t.abort(),t=new AbortController,fetch(e,{signal:t.signal})},y=e=>e===null||e instanceof AbortController,x="https://rule34-api.netlify.app",b="https://api.rule34.xxx/index.php?page=dapi";let A=null;const N=async e=>{const t=new URL("https://api.rule34.xxx/autocomplete.php");t.searchParams.append("q",e.replaceAll(" ","_"));const n=await w(t.toString(),A);if(n.ok){const r=await n.json();if(Array.isArray(r)){if(r.length===0)throw new Error("No tags found");return r.map(I)}else throw r.message?new Error(r.message):new Error("Invalid tag suggestions received")}else throw new Error("Failed to get tag suggestions")},q=async(e,t,n)=>{let r=await f(e);if(r)return r;let a;n&&t?a=new URL(`${b}&s=tag&q=index&limit=1&api_key=${t}&user_id=${n}`):a=new URL(`${x}/tag-details`),a.searchParams.append("name",e);const c=await(await fetch(a.toString())).text(),d=new DOMParser().parseFromString(c,"text/xml").getElementsByTagName("tag")[0],i=P(d.attributes);return i&&m(i),i},I=e=>({label:g(e.value),count:S(e.label),type:"tag"}),S=e=>Number(e.substring(e.lastIndexOf("(")+1,e.length-1)),P=e=>{const t=e.getNamedItem("name"),n=e.getNamedItem("count"),r=e.getNamedItem("type");if(!(t===null||n===null||r===null))return{name:g(t.value),count:Number(n.value),type:E(r.value)}},E=e=>["general","artist","general","copyright","character","metadata"][Number(e)],L=l(u.ApiKey,""),v=l(u.UserId,"");export{x as A,b as R,L as a,q as b,m as c,w as f,N as g,h as i,g as r,v as u};
