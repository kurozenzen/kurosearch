import{p as a,S as n,s as o,c as i}from"./store-keys.402ed1b9.js";const l=e=>e.replaceAll("&#034;",'"').replaceAll("&#038;","&").replaceAll("&#039;","'").replaceAll("&eacute;","Ã©"),u=e=>{try{return new URL(e),!0}catch{return!1}},g=(e,t)=>{if(!u(e))throw new TypeError("Invalid URL passed to fetchAbortPrevious");if(!m(t))throw new TypeError("Invalid AbortController passed to fetchAbortPrevious");return t&&t.abort(),t=new AbortController,fetch(e,{signal:t.signal})},m=e=>e===null||e instanceof AbortController,d="https://rule34-api.netlify.app",h="https://api.rule34.xxx/index.php?page=dapi";let w=null;const U=async e=>{const t=new URL("https://api.rule34.xxx/autocomplete.php");t.searchParams.append("q",e.replaceAll(" ","_"));const r=await g(t.toString(),w);if(r.ok){const s=await r.json();if(Array.isArray(s)){if(s.length===0)throw new Error("No tags found");return s.map(f)}else throw s.message?new Error(s.message):new Error("Invalid tag suggestions received")}else throw new Error("Failed to get tag suggestions")},E=async(e,t,r)=>{let s;r&&t?s=new URL(`${h}&s=tag&q=index&limit=1&api_key=${t}&user_id=${r}`):s=new URL(`${d}/tag-details`),s.searchParams.append("name",e);const c=await(await fetch(s.toString())).text(),p=new DOMParser().parseFromString(c,"text/xml").getElementsByTagName("tag")[0];return A(p.attributes)},f=e=>({label:l(e.value),count:y(e.label),type:"tag"}),y=e=>Number(e.substring(e.lastIndexOf("(")+1,e.length-1)),A=e=>{const t=e.getNamedItem("name"),r=e.getNamedItem("count"),s=e.getNamedItem("type");if(!(t===null||r===null||s===null))return{name:l(t.value),count:Number(r.value),type:x(s.value)}},x=e=>["general","artist","general","copyright","character","metadata"][Number(e)],b=()=>{const e="",{subscribe:t,set:r}=a(n.ApiKey,e,i,o);return{subscribe:t,set:r,reset:()=>r(e)}},N=b(),v=()=>{const e="",{subscribe:t,set:r}=a(n.UserId,e,i,o);return{subscribe:t,set:r,reset:()=>r(e)}},T=v();export{d as A,h as R,N as a,E as b,g as f,U as g,u as i,l as r,T as u};
